{"ast":null,"code":"var _jsxFileName = \"V:\\\\Vishwajeet\\\\Desktop\\\\Web Dev\\\\All codes\\\\Practice\\\\website 4\\\\musonic\\\\src\\\\Components\\\\MediaPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MediaPlayer(_ref) {\n  _s();\n  let {} = _ref;\n  // const toggleScreenMode = () => {\n  //   setScreenMode((prevMode) => (prevMode === \"full\" ? \"half\" : \"full\"));\n  // };\n  const {\n    title,\n    img,\n    musicid\n  } = useParams();\n  // useEffect(() => {\n  //   console.log(id)\n  //   musicid\n  // }, [id,musicid])\n  // the audio variable needs to be stored in a ref in order to access it across renders\n  let audio = useRef();\n  // start the audio (using the .current property of the ref we just created) when the component mounts using the useEffect hook\n  useEffect(() => {\n    audio.current = new Audio(`https://musicapi.x007.workers.dev/fetch?id=${musicid}`);\n    // audio.current.play();\n  }, []);\n  // Stop the audio when the component unmounts\n  // (not exactly what you asked re React Router, but similar idea)\n  // useEffect(() => {\n  //   return () => {\n  //     audio.current.pause();\n  //     console.log(\"in cleanup\");\n  //   };\n  // }, [musicid]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mediaplayer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerImg\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: img,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: audio,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(MediaPlayer, \"BrNxG3wNrTuRnj0BuCUlOsgV9YY=\", false, function () {\n  return [useParams];\n});\n_c = MediaPlayer;\nvar _c;\n$RefreshReg$(_c, \"MediaPlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","MediaPlayer","_ref","_s","title","img","musicid","audio","current","Audio","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","controls","type","_c","$RefreshReg$"],"sources":["V:/Vishwajeet/Desktop/Web Dev/All codes/Practice/website 4/musonic/src/Components/MediaPlayer.js"],"sourcesContent":["import React, { useEffect,useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function MediaPlayer({}) {\n  // const toggleScreenMode = () => {\n  //   setScreenMode((prevMode) => (prevMode === \"full\" ? \"half\" : \"full\"));\n  // };\n  const {title,img,musicid } = useParams();\n  // useEffect(() => {\n  //   console.log(id)\n  //   musicid\n  // }, [id,musicid])\n  // the audio variable needs to be stored in a ref in order to access it across renders\n  let audio = useRef();\n  // start the audio (using the .current property of the ref we just created) when the component mounts using the useEffect hook\n  useEffect(() => {\n    audio.current = new Audio(`https://musicapi.x007.workers.dev/fetch?id=${musicid}`);\n    // audio.current.play();\n  }, []);\n  // Stop the audio when the component unmounts\n  // (not exactly what you asked re React Router, but similar idea)\n  // useEffect(() => {\n  //   return () => {\n  //     audio.current.pause();\n  //     console.log(\"in cleanup\");\n  //   };\n  // }, [musicid]);\n\n  return (\n    <>\n      <div className=\"mediaplayer\">\n        <div className=\"playerImg\">\n          <img src={img} alt=\"\" />\n          <h1>{title}</h1>\n        </div>\n        {/* <iframe\n          src={`https://musicapi.x007.workers.dev/fetch?id=${musicid}`\n          }\n          width=\"50%\"\n          height=\"50%\"\n        ></iframe> */}\n        <audio controls>\n          <source\n            src={audio}\n            type=\"audio/mpeg\"\n          />\n        </audio>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAACC,MAAM,QAAQ,OAAO;AAC/C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAAK;EAAAC,EAAA;EAAA,IAAJ,CAAC,CAAC,GAAAD,IAAA;EACpC;EACA;EACA;EACA,MAAM;IAACE,KAAK;IAACC,GAAG;IAACC;EAAQ,CAAC,GAAGV,SAAS,CAAC,CAAC;EACxC;EACA;EACA;EACA;EACA;EACA,IAAIW,KAAK,GAAGZ,MAAM,CAAC,CAAC;EACpB;EACAD,SAAS,CAAC,MAAM;IACda,KAAK,CAACC,OAAO,GAAG,IAAIC,KAAK,CAAE,8CAA6CH,OAAQ,EAAC,CAAC;IAClF;EACF,CAAC,EAAE,EAAE,CAAC;EACN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACER,OAAA,CAAAE,SAAA;IAAAU,QAAA,eACEZ,OAAA;MAAKa,SAAS,EAAC,aAAa;MAAAD,QAAA,gBAC1BZ,OAAA;QAAKa,SAAS,EAAC,WAAW;QAAAD,QAAA,gBACxBZ,OAAA;UAAKc,GAAG,EAAEP,GAAI;UAACQ,GAAG,EAAC;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxBnB,OAAA;UAAAY,QAAA,EAAKN;QAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eAONnB,OAAA;QAAOoB,QAAQ;QAAAR,QAAA,eACbZ,OAAA;UACEc,GAAG,EAAEL,KAAM;UACXY,IAAI,EAAC;QAAY;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACN,CAAC;AAEP;AAACd,EAAA,CA/CuBF,WAAW;EAAA,QAIJL,SAAS;AAAA;AAAAwB,EAAA,GAJhBnB,WAAW;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}